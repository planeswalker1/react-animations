{"version":3,"sources":["components/Modal/Modal.js","components/Backdrop/Backdrop.js","components/List/List.js","App.js","serviceWorker.js","index.js"],"names":["modal","props","classes","show","className","join","onClick","closeModalHandler","backdrop","List","state","items","addItemHandler","setState","prevState","concat","length","removeItemHandler","clickedIndex","filter","item","index","listItems","this","map","key","Component","App","isModalShown","showModalHandler","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uUAkBeA,G,MAdD,SAAAC,GACZ,IAAIC,EAAU,CAAC,QACbD,EAAME,KACJ,cACA,iBAEJ,OACE,yBAAKC,UAAWF,EAAQG,KAAK,MAC3B,uCACA,4BAAQD,UAAU,SAASE,QAASL,EAAMM,mBAA1C,cCESC,G,MAXE,SAAAP,GACf,IAAIC,EAAU,CAAC,WACbD,EAAME,KACF,iBACA,oBAEN,OACE,yBAAKC,UAAWF,EAAQG,KAAK,SCkClBI,G,iNAxCbC,MAAQ,CACNC,MAAO,CAAC,EAAG,EAAG,I,EAGhBC,eAAiB,WACf,EAAKC,SAAS,SAAAC,GACZ,MAAO,CACLH,MAAOG,EAAUH,MAAMI,OAAOD,EAAUH,MAAMK,OAAS,O,EAK7DC,kBAAoB,SAAAC,GAClB,EAAKL,SAAS,SAACC,GACb,MAAO,CACLH,MAAOG,EAAUH,MAAMQ,OAAO,SAACC,EAAMC,GAAP,OAAiBA,IAAUH,Q,wEAKrD,IAAD,OACDI,EAAYC,KAAKb,MAAMC,MAAMa,IAAI,SAACJ,EAAMC,GAAP,OACrC,wBACEI,IAAKJ,EACLjB,UAAU,YACVE,QAAS,kBAAM,EAAKW,kBAAkBI,KAASD,KAGnD,OACE,6BACE,4BAAQhB,UAAU,SAASE,QAASiB,KAAKX,gBAAzC,YACA,2DACA,wBAAIR,UAAU,QACXkB,Q,GAlCQI,cCuCJC,E,2MApCbjB,MAAQ,CACNkB,cAAc,G,EAGhBC,iBAAmB,WACjB,EAAKhB,SAAS,CAAEe,cAAc,K,EAGhCrB,kBAAoB,WAClB,EAAKM,SAAS,CAAEe,cAAc,K,wEAI9B,OACE,yBAAKxB,UAAU,OACb,gDAEA,kBAAC,EAAD,CACED,KAAMoB,KAAKb,MAAMkB,aACjBrB,kBAAmBgB,KAAKhB,oBAE1B,kBAAC,EAAD,CACEJ,KAAMoB,KAAKb,MAAMkB,eAEnB,4BACExB,UAAU,SACVE,QAASiB,KAAKM,kBAFhB,cAKA,+CACA,kBAAC,EAAD,W,GA/BUH,aCMEI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.b4f30e94.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './Modal.css';\r\n\r\nconst modal = props => {\r\n  let classes = ['modal',\r\n    props.show\r\n    ? 'modal--open'\r\n    : 'modal--closed'\r\n  ];\r\n  return (\r\n    <div className={classes.join(' ')}>\r\n      <h1>A Modal</h1>\r\n      <button className='button' onClick={props.closeModalHandler}>Dismiss</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default modal;","import React from 'react';\r\n\r\nimport './Backdrop.css';\r\n\r\nconst backdrop = props => {\r\n  let classes = ['backdrop',\r\n    props.show\r\n      ? 'backdrop--open'\r\n      : 'backdrop--closed'\r\n  ];\r\n  return (\r\n    <div className={classes.join(' ')}></div>\r\n  );\r\n};\r\n\r\nexport default backdrop;","import React, { Component } from 'react';\r\n\r\nimport './List.css';\r\n\r\nclass List extends Component {\r\n  state = {\r\n    items: [1, 2, 3]\r\n  }\r\n\r\n  addItemHandler = () => {\r\n    this.setState(prevState => {\r\n      return {\r\n        items: prevState.items.concat(prevState.items.length + 1)\r\n      };\r\n    });\r\n  }\r\n\r\n  removeItemHandler = clickedIndex => {\r\n    this.setState((prevState) => {\r\n      return {\r\n        items: prevState.items.filter((item, index) => index !== clickedIndex)\r\n      };\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const listItems = this.state.items.map((item, index) => (\r\n      <li\r\n        key={index}\r\n        className='list-item'\r\n        onClick={() => this.removeItemHandler(index)}>{item}</li>\r\n    ));\r\n\r\n    return (\r\n      <div>\r\n        <button className='button' onClick={this.addItemHandler}>Add Item</button>\r\n        <p>Click Item Number to Remove.</p>\r\n        <ul className='list'>\r\n          {listItems}\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default List;","import React, { Component } from 'react';\n\nimport Modal from './components/Modal/Modal';\nimport Backdrop from './components/Backdrop/Backdrop';\nimport List from './components/List/List';\n\nclass App extends Component {\n  state = {\n    isModalShown: false\n  }\n\n  showModalHandler = () => {\n    this.setState({ isModalShown: true });\n  }\n\n  closeModalHandler = () => {\n    this.setState({ isModalShown: false });\n  }\n\n  render() {\n    return (\n      <div className='app'>\n        <h1>React Animations</h1>\n\n        <Modal \n          show={this.state.isModalShown}\n          closeModalHandler={this.closeModalHandler}\n        />\n        <Backdrop \n          show={this.state.isModalShown}\n        />\n        <button\n          className='button'\n          onClick={this.showModalHandler}\n        >Open Modal</button>\n\n        <h3>Animating Lists</h3>\n        <List />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}